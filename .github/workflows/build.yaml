name: Scala CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Get Stage and Branch Name
        id: stage-name
        run: |
          BRANCH_NAME=${{ steps.branch-name.outputs.current_branch }}
          if [ "${BRANCH_NAME}" == "master" ]; then
            STAGE_NAME="prod"
          else
            SANITIZED_BRANCH_NAME=${BRANCH_NAME//\//_}
            STAGE_NAME="preview_$SANITIZED_BRANCH_NAME"
          fi
          echo "stage-name=${STAGE_NAME}" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=${{ steps.branch-name.outputs.current_branch }}" >> $GITHUB_ENV
          echo "Stage is ${STAGE_NAME}"

      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: "17" # for a specific JDK 17; or '17' for the latest JDK 17
          distribution: "graalvm" # New 'distribution' option
          cache: "sbt"

      - name: Generate .jar
        run: sbt assembly

      - name: Save jar
        uses: actions/upload-artifact@v2
        with:
          name: jar
          path: target/scala-3.3.0/API-assembly-0.1.0-SNAPSHOT.jar
      - name: Start server
        env:
          POSTGRES_SCHEMA: ${{ steps.stage-name.outputs.stage-name }}
          EMBAAS_API_KEY: ${{ secrets.EMBAAS_API_KEY }}
          EMBEDDING_API_ENDPOINT: ${{ secrets.EMBEDDING_API_ENDPOINT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_URI: ${{ secrets.POSTGRES_URI }}
        run: |
          java -jar target/scala-3.3.0/API-assembly-0.1.0-SNAPSHOT.jar &
          sleep 3

      - name: Set up PostgreSQL CLI
        run: sudo apt-get install -y postgresql-client

      - name: Merge migrations into schema
        run: |
          echo "SET SEARCH_PATH = ${{ steps.stage-name.outputs.stage-name }};" > schema.sql
          cat postgres/migrations/*/up.sql >> schema.sql

      - name: Run schema
        env:
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: psql -h ${{ secrets.POSTGRES_HOST }} -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DATABASE }} -f schema.sql

      - name: Run tests
        env:
          POSTGRES_SCHEMA: ${{ steps.stage-name.outputs.stage-name }}
          EMBAAS_API_KEY: ${{ secrets.EMBAAS_API_KEY }}
          EMBEDDING_API_ENDPOINT: ${{ secrets.EMBEDDING_API_ENDPOINT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
        run: sbt test
        # Optional: This step uploads information to the GitHub dependency graph and unblocking Dependabot alerts for the repository
      - name: Upload dependency graph
        uses: scalacenter/sbt-dependency-submission@ab086b50c947c9774b70f39fc7f6e20ca2706c91
